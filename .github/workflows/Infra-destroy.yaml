# name: Destroy AWS Resources

# on:
#   workflow_run:
#     workflows: ["ECS/EKS Image Deployment"]  # ðŸ”¹ Name of the ECS deployment workflow
#     types:
#       - completed  # Runs after ECS/EKS Image Deployment

# jobs:
#   destroy:
#     runs-on: ubuntu-latest
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}  # âœ… Only run if deployment was successful
#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       # - name: Destroy ECS Service (if exists)
#       #   run: |
#       #     aws ecs update-service --cluster my-cluster --service my-service --desired-count 0
#       #     aws ecs delete-service --cluster my-cluster --service my-service --force || true

#       # - name: Destroy Load Balancer
#       #   run: |
#       #     LB_ARN=$(aws elbv2 describe-load-balancers --names my-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text || echo "")
#       #     if [ -n "$LB_ARN" ]; then
#       #       aws elbv2 delete-load-balancer --load-balancer-arn $LB_ARN
#       #     fi

#       # - name: Destroy ECR Repository (Optional)
#       #   run: |
#       #     aws ecr delete-repository --repository-name my-ecr-repo --force || true

#       - name: Terraform Destroy (If Using Terraform)
#         run: |
#           terraform init
#           terraform destroy -auto-approve


name: Destroy AWS Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Enter the environment to destroy (e.g., dev, staging, prod)"
        required: true
      confirm:
        description: "Type 'DESTROY' to confirm"
        required: true

jobs:
  destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v3

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into GH registry
        uses: actions/checkout@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TMP_PAT_TOKEN }}

      - name: "Terraform Apply"
        run: |
          terraform init
          terraform destroy --var-file="dev.tfvars" -auto-approve
